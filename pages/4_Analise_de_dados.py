# Importa√ß√£o das bibliotecas necess√°rias
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import numpy as np

# --- Configura√ß√£o da P√°gina ---
# Define o t√≠tulo da p√°gina, o √≠cone e o layout. O layout "wide" aproveita melhor o espa√ßo da tela.
st.set_page_config(
    page_title="Dashboard Profissional - An√°lise de Mercado de IA",
    page_icon="ü§ñ",
    layout="wide"
)

# --- Carregamento dos Dados ---
# Fun√ß√£o para carregar os dados. O decorator @st.cache_data evita que os dados sejam recarregados
# a cada intera√ß√£o do usu√°rio, otimizando a performance do dashboard.
@st.cache_data
def carregar_dados():
    try:
        df = pd.read_csv("ai_job_market_insights.csv")
        return df
    except FileNotFoundError:
        st.error("Erro: O arquivo 'ai_job_market_insights.csv' n√£o foi encontrado.")
        st.info("Por favor, certifique-se de que o arquivo de dados est√° na mesma pasta que o script Python.")
        return None

df = carregar_dados()

# Se o dataframe n√£o for carregado (devido ao erro), interrompe a execu√ß√£o do script.
if df is None:
    st.stop()

# --- Transforma√ß√£o dos Tipos de Dados ---
# Convertendo as vari√°veis ordinais para o tipo 'category' com a ordem correta.
# Isso garante que as visualiza√ß√µes e an√°lises respeitem a hierarquia dos dados.
ordem_company_size = ['Small', 'Medium', 'Large']
ordem_adoption_level = ['Low', 'Medium', 'High']
ordem_automation_risk = ['Low', 'Medium', 'High']

df['Company_Size'] = pd.Categorical(df['Company_Size'], categories=ordem_company_size, ordered=True)
df['AI_Adoption_Level'] = pd.Categorical(df['AI_Adoption_Level'], categories=ordem_adoption_level, ordered=True)
df['Automation_Risk'] = pd.Categorical(df['Automation_Risk'], categories=ordem_automation_risk, ordered=True)

# --- T√≠tulo Principal do Dashboard ---
st.title("üìä Dashboard de An√°lise do Mercado de Trabalho em IA")
st.markdown("---")

# --- In√≠cio da Aba de An√°lise de Dados (conforme o enunciado do CP1) ---

# --- SE√á√ÉO 1: Apresenta√ß√£o dos Dados e Tipos de Vari√°veis ---
st.header("1. Apresenta√ß√£o e Estrutura dos Dados")

# Expansor para manter a UI limpa. O usu√°rio pode clicar para ver os detalhes.
with st.expander("Clique para ver a estrutura do Dataset"):
    st.subheader("Amostra dos Dados")
    st.write("Abaixo est√£o as cinco primeiras linhas do conjunto de dados para uma visualiza√ß√£o inicial.")
    st.dataframe(df.head())

    st.subheader("Dimens√µes do Dataset")
    st.write(f"O conjunto de dados possui **{df.shape[0]} linhas** (observa√ß√µes) e **{df.shape[1]} colunas** (vari√°veis).")

# --- TABELA √öNICA DE CLASSIFICA√á√ÉO DE VARI√ÅVEIS ---
st.subheader("Classifica√ß√£o das Vari√°veis")
st.write("A tabela a seguir apresenta cada vari√°vel, seu tipo de dado t√©cnico (identificado pelo Pandas) e sua classifica√ß√£o estat√≠stica.")

# Mapeamento da classifica√ß√£o estat√≠stica para cada vari√°vel
classificacao = {
    'Job_Title': 'Qualitativa Nominal',
    'Industry': 'Qualitativa Nominal',
    'Location': 'Qualitativa Nominal',
    'Required_Skills': 'Qualitativa Nominal',
    'Remote_Friendly': 'Qualitativa Nominal',
    'Job_Growth_Projection': 'Qualitativa Nominal',
    'Company_Size': 'Qualitativa Ordinal',
    'AI_Adoption_Level': 'Qualitativa Ordinal',
    'Automation_Risk': 'Qualitativa Ordinal',
    'Salary_USD': 'Quantitativa Cont√≠nua'
}

# Cria√ß√£o do DataFrame para a tabela de classifica√ß√£o
df_tipos = pd.DataFrame({
    "Vari√°vel": df.columns,
    "Tipo de Dado (Pandas)": [str(dtype) for dtype in df.dtypes],
    "Classifica√ß√£o Estat√≠stica": [classificacao.get(col, "N√£o Classificado") for col in df.columns]
})
st.table(df_tipos)


st.subheader("Perguntas de An√°lise Definidas")
st.markdown("""
- Qual √© a distribui√ß√£o salarial para profissionais no mercado de IA?
- O tamanho da empresa ou a ind√∫stria influenciam o sal√°rio?
- **Existe uma diferen√ßa salarial estatisticamente significativa entre vagas que s√£o `Remote_Friendly` e as que n√£o s√£o?** (Foco do Teste de Hip√≥tese)
""")
st.markdown("---")


# --- SE√á√ÉO 2: Medidas Centrais e An√°lise Descritiva ---
st.header("2. An√°lise Descritiva e Medidas Centrais")
st.write("Nesta se√ß√£o, focamos na an√°lise da vari√°vel quantitativa principal: `Salary_USD`.")

# Garante que a coluna de sal√°rio existe antes de tentar fazer os c√°lculos
if "Salary_USD" in df.columns:
    salarios = df["Salary_USD"].dropna()

    # Layout em colunas para melhor organiza√ß√£o
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Estat√≠sticas Descritivas do Sal√°rio")
        st.write(f"**M√©dia Salarial:** ${salarios.mean():,.2f} USD")
        st.write(f"**Mediana Salarial:** ${salarios.median():,.2f} USD")
        st.write(f"**Desvio Padr√£o:** ${salarios.std():,.2f} USD")
        st.write(f"**Sal√°rio M√≠nimo:** ${salarios.min():,.2f} USD")
        st.write(f"**Sal√°rio M√°ximo:** ${salarios.max():,.2f} USD")

    with col2:
        st.subheader("Distribui√ß√£o dos Sal√°rios (USD)")
        # Cria√ß√£o do gr√°fico de histograma
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(salarios, kde=True, ax=ax, bins=30, color='skyblue')
        ax.set_title("Histograma da Distribui√ß√£o Salarial no Mercado de IA")
        ax.set_xlabel("Sal√°rio (USD)")
        ax.set_ylabel("Frequ√™ncia")
        st.pyplot(fig)
else:
    st.warning("A coluna 'Salary_USD' n√£o foi encontrada no dataset.")
st.markdown("---")

# --- SE√á√ÉO 3: An√°lises Adicionais e Respostas a Perguntas Espec√≠ficas ---
st.header("3. An√°lises Adicionais e Respostas a Perguntas Espec√≠ficas")

# Pergunta 1: Quais cargos est√£o mais associados ao crescimento de emprego?
st.subheader("Quais cargos est√£o mais associados ao crescimento de emprego?")
cargos_crescimento = df[df['Job_Growth_Projection'] == 'Growth']['Job_Title'].value_counts().head(10)
fig, ax = plt.subplots(figsize=(12, 7))
sns.barplot(x=cargos_crescimento.values, y=cargos_crescimento.index, palette='viridis', ax=ax)
ax.set_title('Top 10 Cargos com Proje√ß√£o de Crescimento')
ax.set_xlabel('N√∫mero de Vagas')
ax.set_ylabel('Cargo')
st.pyplot(fig)

# Pergunta 2 e 7: Como o sal√°rio varia e quais localiza√ß√µes oferecem os maiores sal√°rios?
st.subheader("Quais localiza√ß√µes oferecem os maiores sal√°rios para cargos de IA?")
maiores_salarios_local = df.groupby('Location')['Salary_USD'].mean().sort_values(ascending=False).head(10)
fig, ax = plt.subplots(figsize=(12, 7))
sns.barplot(x=maiores_salarios_local.values, y=maiores_salarios_local.index, palette='plasma', ax=ax)
ax.set_title('Top 10 Localiza√ß√µes por Sal√°rio M√©dio em IA')
ax.set_xlabel('Sal√°rio M√©dio (USD)')
ax.set_ylabel('Localiza√ß√£o')
st.pyplot(fig)

# Pergunta 3: Correla√ß√£o entre n√≠vel de ado√ß√£o de IA e proje√ß√£o de crescimento
st.subheader("Existe correla√ß√£o entre o n√≠vel de ado√ß√£o de IA e a proje√ß√£o de crescimento?")
crosstab_ia_growth = pd.crosstab(df['AI_Adoption_Level'], df['Job_Growth_Projection'])
fig, ax = plt.subplots(figsize=(10, 6))
sns.heatmap(crosstab_ia_growth, annot=True, fmt='d', cmap='YlGnBu', ax=ax)
ax.set_title('Ado√ß√£o de IA vs. Proje√ß√£o de Crescimento de Empregos')
ax.set_xlabel('Proje√ß√£o de Crescimento')
ax.set_ylabel('N√≠vel de Ado√ß√£o de IA')
st.pyplot(fig)

# Pergunta 4: Habilidades mais comuns em empregos com alta proje√ß√£o de crescimento
st.subheader("Quais habilidades s√£o mais comuns em empregos com alta proje√ß√£o de crescimento?")
habilidades_crescimento = df[df['Job_Growth_Projection'] == 'Growth']['Required_Skills'].value_counts().head(10)
fig, ax = plt.subplots(figsize=(12, 7))
sns.barplot(x=habilidades_crescimento.values, y=habilidades_crescimento.index, palette='rocket', ax=ax)
ax.set_title('Top 10 Habilidades em Vagas com Proje√ß√£o de Crescimento')
ax.set_xlabel('N√∫mero de Vagas')
ax.set_ylabel('Habilidade')
st.pyplot(fig)

# Pergunta 6: Como o tamanho da empresa influencia o sal√°rio e a proje√ß√£o de crescimento?
st.subheader("Como o tamanho da empresa influencia o sal√°rio?")
fig, ax = plt.subplots(figsize=(12, 7))
sns.boxplot(x='Company_Size', y='Salary_USD', data=df, palette='muted', ax=ax)
ax.set_title('Distribui√ß√£o Salarial por Tamanho da Empresa')
ax.set_xlabel('Tamanho da Empresa')
ax.set_ylabel('Sal√°rio (USD)')
st.pyplot(fig)

# Pergunta 8: Quais cargos t√™m maior risco de automa√ß√£o e como isso afeta o sal√°rio?
st.subheader("Como o risco de automa√ß√£o afeta o sal√°rio?")
fig, ax = plt.subplots(figsize=(12, 7))
sns.boxplot(x='Automation_Risk', y='Salary_USD', data=df, palette='crest', ax=ax)
ax.set_title('Distribui√ß√£o Salarial por N√≠vel de Risco de Automa√ß√£o')
ax.set_xlabel('Risco de Automa√ß√£o')
ax.set_ylabel('Sal√°rio (USD)')
st.pyplot(fig)
st.markdown("---")

# --- SE√á√ÉO 4: Testes de Hip√≥tese e Intervalos de Confian√ßa ---
st.header("4. Testes de Hip√≥tese e Intervalos de Confian√ßa")

# Explica√ß√£o simples sobre Testes de Hip√≥tese
st.info("""
**O que √© um Teste de Hip√≥tese?**

√â uma forma de usar dados para tomar uma decis√£o. Partimos de uma **Hip√≥tese Nula (H‚ÇÄ)**, que diz que "n√£o h√° diferen√ßa" (ex: as m√©dias s√£o iguais). O objetivo √© ver se temos evid√™ncias fortes o suficiente para rejeitar essa ideia.

**Como decidimos?** Olhamos para o **p-valor**:
- **Se p-valor < 0.05:** √â um resultado "raro". Rejeitamos a H‚ÇÄ e conclu√≠mos que existe uma diferen√ßa significativa.
- **Se p-valor >= 0.05:** √â um resultado "comum". N√£o temos evid√™ncias para rejeitar a H‚ÇÄ.

O **Intervalo de Confian√ßa (IC)** complementa o teste, nos dando uma faixa de valores prov√°veis para a m√©dia real.
""")

# Fun√ß√£o para calcular o intervalo de confian√ßa
def get_confidence_interval(data, confidence=0.95):
    n = len(data)
    mean = np.mean(data)
    std_err = stats.sem(data)
    h = std_err * stats.t.ppf((1 + confidence) / 2., n-1)
    return mean - h, mean + h

# Teste 1: Sal√°rio vs. Trabalho Remoto
st.subheader("Teste 1: Sal√°rio por Modalidade de Trabalho (Remoto vs. N√£o Remoto)")
st.write("Este teste verifica se a diferen√ßa observada na m√©dia salarial entre vagas remotas e n√£o remotas √© estatisticamente significativa ou apenas uma coincid√™ncia.")

if "Salary_USD" in df.columns and "Remote_Friendly" in df.columns:
    salarios_remoto = df[df['Remote_Friendly'] == 'Yes']['Salary_USD'].dropna()
    salarios_nao_remoto = df[df['Remote_Friendly'] == 'No']['Salary_USD'].dropna()

    col_teste1, col_visual1 = st.columns(2)
    with col_teste1:
        st.markdown("**Hip√≥tese Nula (H‚ÇÄ):** A m√©dia salarial das vagas remotas √© IGUAL √† m√©dia salarial das vagas n√£o remotas.")
        st.markdown("**Hip√≥tese Alternativa (H‚ÇÅ):** A m√©dia salarial das vagas remotas √© DIFERENTE da m√©dia salarial das vagas n√£o remotas.")

        if len(salarios_remoto) > 1 and len(salarios_nao_remoto) > 1:
            t_stat, p_valor = stats.ttest_ind(salarios_remoto, salarios_nao_remoto, equal_var=False)
            ic_remoto = get_confidence_interval(salarios_remoto)
            ic_nao_remoto = get_confidence_interval(salarios_nao_remoto)
            
            st.write(f"**P-valor:** `{p_valor:.4f}`")
            if p_valor < 0.05:
                st.success("**Conclus√£o:** Rejeitamos H‚ÇÄ. H√° uma diferen√ßa estatisticamente significativa.")
            else:
                st.info("**Conclus√£o:** N√£o rejeitamos H‚ÇÄ. N√£o h√° diferen√ßa estatisticamente significativa.")
            
            st.markdown("**Intervalos de Confian√ßa (95%) para a M√©dia Salarial:**")
            st.write(f"- **Remoto:** Entre ${ic_remoto[0]:,.2f} e ${ic_remoto[1]:,.2f}")
            st.write(f"- **N√£o Remoto:** Entre ${ic_nao_remoto[0]:,.2f} e ${ic_nao_remoto[1]:,.2f}")

        else:
            st.warning("Dados insuficientes para o teste.")
    with col_visual1:
        fig, ax = plt.subplots()
        sns.boxplot(x='Remote_Friendly', y='Salary_USD', data=df, palette="coolwarm", ax=ax)
        ax.set_title("Compara√ß√£o de Sal√°rios: Remoto vs. N√£o Remoto")
        st.pyplot(fig)
else:
    st.warning("Colunas 'Salary_USD' ou 'Remote_Friendly' n√£o encontradas.")

st.markdown("---")

# Teste 2: Sal√°rio vs. Tamanho da Empresa
st.subheader("Teste 2: Sal√°rio por Tamanho da Empresa")
st.write("Este teste nos ajuda a determinar se o tamanho da empresa (Pequena, M√©dia, Grande) tem um impacto real na m√©dia salarial, comparando os tr√™s grupos de uma s√≥ vez.")

if "Salary_USD" in df.columns and "Company_Size" in df.columns:
    salario_pequena = df[df['Company_Size'] == 'Small']['Salary_USD'].dropna()
    salario_media = df[df['Company_Size'] == 'Medium']['Salary_USD'].dropna()
    salario_grande = df[df['Company_Size'] == 'Large']['Salary_USD'].dropna()

    col_teste2, col_visual2 = st.columns(2)
    with col_teste2:
        st.markdown("**Hip√≥tese Nula (H‚ÇÄ):** As m√©dias salariais s√£o IGUAIS para todos os tamanhos de empresa.")
        st.markdown("**Hip√≥tese Alternativa (H‚ÇÅ):** Pelo menos uma das m√©dias salariais √© DIFERENTE das outras.")
        
        if len(salario_pequena) > 1 and len(salario_media) > 1 and len(salario_grande) > 1:
            f_stat, p_valor_anova = stats.f_oneway(salario_pequena, salario_media, salario_grande)
            ic_pequena = get_confidence_interval(salario_pequena)
            ic_media = get_confidence_interval(salario_media)
            ic_grande = get_confidence_interval(salario_grande)

            st.write(f"**P-valor:** `{p_valor_anova:.4f}`")
            if p_valor_anova < 0.05:
                st.success("**Conclus√£o:** Rejeitamos H‚ÇÄ. H√° uma diferen√ßa estatisticamente significativa nos sal√°rios entre os diferentes tamanhos de empresa.")
            else:
                st.info("**Conclus√£o:** N√£o rejeitamos H‚ÇÄ. N√£o h√° diferen√ßa estatisticamente significativa.")

            st.markdown("**Intervalos de Confian√ßa (95%) para a M√©dia Salarial:**")
            st.write(f"- **Pequena:** Entre ${ic_pequena[0]:,.2f} e ${ic_pequena[1]:,.2f}")
            st.write(f"- **M√©dia:** Entre ${ic_media[0]:,.2f} e ${ic_media[1]:,.2f}")
            st.write(f"- **Grande:** Entre ${ic_grande[0]:,.2f} e ${ic_grande[1]:,.2f}")
        else:
            st.warning("Dados insuficientes para o teste.")
    with col_visual2:
        # Reutiliza o gr√°fico da se√ß√£o anterior para consist√™ncia visual
        fig, ax = plt.subplots()
        sns.boxplot(x='Company_Size', y='Salary_USD', data=df, palette='muted', ax=ax)
        ax.set_title('Distribui√ß√£o Salarial por Tamanho da Empresa')
        st.pyplot(fig)
else:
    st.warning("Colunas 'Salary_USD' ou 'Company_Size' n√£o encontradas.")

